/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Translation as PrismaTranslation } from "@prisma/client";

export class TranslationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TranslationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.translation.count(args);
  }

  async translations(
    args: Prisma.TranslationFindManyArgs
  ): Promise<PrismaTranslation[]> {
    return this.prisma.translation.findMany(args);
  }
  async translation(
    args: Prisma.TranslationFindUniqueArgs
  ): Promise<PrismaTranslation | null> {
    return this.prisma.translation.findUnique(args);
  }
  async createTranslation(
    args: Prisma.TranslationCreateArgs
  ): Promise<PrismaTranslation> {
    return this.prisma.translation.create(args);
  }
  async updateTranslation(
    args: Prisma.TranslationUpdateArgs
  ): Promise<PrismaTranslation> {
    return this.prisma.translation.update(args);
  }
  async deleteTranslation(
    args: Prisma.TranslationDeleteArgs
  ): Promise<PrismaTranslation> {
    return this.prisma.translation.delete(args);
  }
}
