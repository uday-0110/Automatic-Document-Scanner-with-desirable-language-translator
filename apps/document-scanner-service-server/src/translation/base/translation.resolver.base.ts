/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Translation } from "./Translation";
import { TranslationCountArgs } from "./TranslationCountArgs";
import { TranslationFindManyArgs } from "./TranslationFindManyArgs";
import { TranslationFindUniqueArgs } from "./TranslationFindUniqueArgs";
import { CreateTranslationArgs } from "./CreateTranslationArgs";
import { UpdateTranslationArgs } from "./UpdateTranslationArgs";
import { DeleteTranslationArgs } from "./DeleteTranslationArgs";
import { TranslationService } from "../translation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Translation)
export class TranslationResolverBase {
  constructor(
    protected readonly service: TranslationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Translation",
    action: "read",
    possession: "any",
  })
  async _translationsMeta(
    @graphql.Args() args: TranslationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Translation])
  @nestAccessControl.UseRoles({
    resource: "Translation",
    action: "read",
    possession: "any",
  })
  async translations(
    @graphql.Args() args: TranslationFindManyArgs
  ): Promise<Translation[]> {
    return this.service.translations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Translation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Translation",
    action: "read",
    possession: "own",
  })
  async translation(
    @graphql.Args() args: TranslationFindUniqueArgs
  ): Promise<Translation | null> {
    const result = await this.service.translation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Translation)
  @nestAccessControl.UseRoles({
    resource: "Translation",
    action: "create",
    possession: "any",
  })
  async createTranslation(
    @graphql.Args() args: CreateTranslationArgs
  ): Promise<Translation> {
    return await this.service.createTranslation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Translation)
  @nestAccessControl.UseRoles({
    resource: "Translation",
    action: "update",
    possession: "any",
  })
  async updateTranslation(
    @graphql.Args() args: UpdateTranslationArgs
  ): Promise<Translation | null> {
    try {
      return await this.service.updateTranslation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Translation)
  @nestAccessControl.UseRoles({
    resource: "Translation",
    action: "delete",
    possession: "any",
  })
  async deleteTranslation(
    @graphql.Args() args: DeleteTranslationArgs
  ): Promise<Translation | null> {
    try {
      return await this.service.deleteTranslation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
