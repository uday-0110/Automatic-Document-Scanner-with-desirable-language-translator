/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProcessingStatus } from "./ProcessingStatus";
import { ProcessingStatusCountArgs } from "./ProcessingStatusCountArgs";
import { ProcessingStatusFindManyArgs } from "./ProcessingStatusFindManyArgs";
import { ProcessingStatusFindUniqueArgs } from "./ProcessingStatusFindUniqueArgs";
import { CreateProcessingStatusArgs } from "./CreateProcessingStatusArgs";
import { UpdateProcessingStatusArgs } from "./UpdateProcessingStatusArgs";
import { DeleteProcessingStatusArgs } from "./DeleteProcessingStatusArgs";
import { ProcessingStatusService } from "../processingStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProcessingStatus)
export class ProcessingStatusResolverBase {
  constructor(
    protected readonly service: ProcessingStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProcessingStatus",
    action: "read",
    possession: "any",
  })
  async _processingStatusesMeta(
    @graphql.Args() args: ProcessingStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProcessingStatus])
  @nestAccessControl.UseRoles({
    resource: "ProcessingStatus",
    action: "read",
    possession: "any",
  })
  async processingStatuses(
    @graphql.Args() args: ProcessingStatusFindManyArgs
  ): Promise<ProcessingStatus[]> {
    return this.service.processingStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProcessingStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProcessingStatus",
    action: "read",
    possession: "own",
  })
  async processingStatus(
    @graphql.Args() args: ProcessingStatusFindUniqueArgs
  ): Promise<ProcessingStatus | null> {
    const result = await this.service.processingStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProcessingStatus)
  @nestAccessControl.UseRoles({
    resource: "ProcessingStatus",
    action: "create",
    possession: "any",
  })
  async createProcessingStatus(
    @graphql.Args() args: CreateProcessingStatusArgs
  ): Promise<ProcessingStatus> {
    return await this.service.createProcessingStatus({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProcessingStatus)
  @nestAccessControl.UseRoles({
    resource: "ProcessingStatus",
    action: "update",
    possession: "any",
  })
  async updateProcessingStatus(
    @graphql.Args() args: UpdateProcessingStatusArgs
  ): Promise<ProcessingStatus | null> {
    try {
      return await this.service.updateProcessingStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcessingStatus)
  @nestAccessControl.UseRoles({
    resource: "ProcessingStatus",
    action: "delete",
    possession: "any",
  })
  async deleteProcessingStatus(
    @graphql.Args() args: DeleteProcessingStatusArgs
  ): Promise<ProcessingStatus | null> {
    try {
      return await this.service.deleteProcessingStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
