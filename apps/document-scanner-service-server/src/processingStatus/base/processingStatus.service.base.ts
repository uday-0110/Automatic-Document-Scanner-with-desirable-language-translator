/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProcessingStatus as PrismaProcessingStatus,
} from "@prisma/client";

export class ProcessingStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessingStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processingStatus.count(args);
  }

  async processingStatuses(
    args: Prisma.ProcessingStatusFindManyArgs
  ): Promise<PrismaProcessingStatus[]> {
    return this.prisma.processingStatus.findMany(args);
  }
  async processingStatus(
    args: Prisma.ProcessingStatusFindUniqueArgs
  ): Promise<PrismaProcessingStatus | null> {
    return this.prisma.processingStatus.findUnique(args);
  }
  async createProcessingStatus(
    args: Prisma.ProcessingStatusCreateArgs
  ): Promise<PrismaProcessingStatus> {
    return this.prisma.processingStatus.create(args);
  }
  async updateProcessingStatus(
    args: Prisma.ProcessingStatusUpdateArgs
  ): Promise<PrismaProcessingStatus> {
    return this.prisma.processingStatus.update(args);
  }
  async deleteProcessingStatus(
    args: Prisma.ProcessingStatusDeleteArgs
  ): Promise<PrismaProcessingStatus> {
    return this.prisma.processingStatus.delete(args);
  }
}
