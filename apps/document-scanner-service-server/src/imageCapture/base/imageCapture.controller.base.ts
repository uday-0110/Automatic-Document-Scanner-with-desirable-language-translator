/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ImageCaptureService } from "../imageCapture.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ImageCaptureCreateInput } from "./ImageCaptureCreateInput";
import { ImageCapture } from "./ImageCapture";
import { ImageCaptureFindManyArgs } from "./ImageCaptureFindManyArgs";
import { ImageCaptureWhereUniqueInput } from "./ImageCaptureWhereUniqueInput";
import { ImageCaptureUpdateInput } from "./ImageCaptureUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ImageCaptureControllerBase {
  constructor(
    protected readonly service: ImageCaptureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ImageCapture })
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createImageCapture(
    @common.Body() data: ImageCaptureCreateInput
  ): Promise<ImageCapture> {
    return await this.service.createImageCapture({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imageUrl: true,
        captureDate: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ImageCapture] })
  @ApiNestedQuery(ImageCaptureFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async imageCaptures(@common.Req() request: Request): Promise<ImageCapture[]> {
    const args = plainToClass(ImageCaptureFindManyArgs, request.query);
    return this.service.imageCaptures({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imageUrl: true,
        captureDate: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ImageCapture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async imageCapture(
    @common.Param() params: ImageCaptureWhereUniqueInput
  ): Promise<ImageCapture | null> {
    const result = await this.service.imageCapture({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imageUrl: true,
        captureDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ImageCapture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateImageCapture(
    @common.Param() params: ImageCaptureWhereUniqueInput,
    @common.Body() data: ImageCaptureUpdateInput
  ): Promise<ImageCapture | null> {
    try {
      return await this.service.updateImageCapture({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          imageUrl: true,
          captureDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ImageCapture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteImageCapture(
    @common.Param() params: ImageCaptureWhereUniqueInput
  ): Promise<ImageCapture | null> {
    try {
      return await this.service.deleteImageCapture({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          imageUrl: true,
          captureDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
