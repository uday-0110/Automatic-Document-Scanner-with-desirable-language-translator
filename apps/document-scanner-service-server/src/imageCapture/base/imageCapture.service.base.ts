/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ImageCapture as PrismaImageCapture } from "@prisma/client";

export class ImageCaptureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImageCaptureCountArgs, "select">
  ): Promise<number> {
    return this.prisma.imageCapture.count(args);
  }

  async imageCaptures(
    args: Prisma.ImageCaptureFindManyArgs
  ): Promise<PrismaImageCapture[]> {
    return this.prisma.imageCapture.findMany(args);
  }
  async imageCapture(
    args: Prisma.ImageCaptureFindUniqueArgs
  ): Promise<PrismaImageCapture | null> {
    return this.prisma.imageCapture.findUnique(args);
  }
  async createImageCapture(
    args: Prisma.ImageCaptureCreateArgs
  ): Promise<PrismaImageCapture> {
    return this.prisma.imageCapture.create(args);
  }
  async updateImageCapture(
    args: Prisma.ImageCaptureUpdateArgs
  ): Promise<PrismaImageCapture> {
    return this.prisma.imageCapture.update(args);
  }
  async deleteImageCapture(
    args: Prisma.ImageCaptureDeleteArgs
  ): Promise<PrismaImageCapture> {
    return this.prisma.imageCapture.delete(args);
  }
}
