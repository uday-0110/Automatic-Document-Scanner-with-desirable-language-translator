/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ImageCapture } from "./ImageCapture";
import { ImageCaptureCountArgs } from "./ImageCaptureCountArgs";
import { ImageCaptureFindManyArgs } from "./ImageCaptureFindManyArgs";
import { ImageCaptureFindUniqueArgs } from "./ImageCaptureFindUniqueArgs";
import { CreateImageCaptureArgs } from "./CreateImageCaptureArgs";
import { UpdateImageCaptureArgs } from "./UpdateImageCaptureArgs";
import { DeleteImageCaptureArgs } from "./DeleteImageCaptureArgs";
import { ImageCaptureService } from "../imageCapture.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ImageCapture)
export class ImageCaptureResolverBase {
  constructor(
    protected readonly service: ImageCaptureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "read",
    possession: "any",
  })
  async _imageCapturesMeta(
    @graphql.Args() args: ImageCaptureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ImageCapture])
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "read",
    possession: "any",
  })
  async imageCaptures(
    @graphql.Args() args: ImageCaptureFindManyArgs
  ): Promise<ImageCapture[]> {
    return this.service.imageCaptures(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ImageCapture, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "read",
    possession: "own",
  })
  async imageCapture(
    @graphql.Args() args: ImageCaptureFindUniqueArgs
  ): Promise<ImageCapture | null> {
    const result = await this.service.imageCapture(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ImageCapture)
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "create",
    possession: "any",
  })
  async createImageCapture(
    @graphql.Args() args: CreateImageCaptureArgs
  ): Promise<ImageCapture> {
    return await this.service.createImageCapture({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ImageCapture)
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "update",
    possession: "any",
  })
  async updateImageCapture(
    @graphql.Args() args: UpdateImageCaptureArgs
  ): Promise<ImageCapture | null> {
    try {
      return await this.service.updateImageCapture({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ImageCapture)
  @nestAccessControl.UseRoles({
    resource: "ImageCapture",
    action: "delete",
    possession: "any",
  })
  async deleteImageCapture(
    @graphql.Args() args: DeleteImageCaptureArgs
  ): Promise<ImageCapture | null> {
    try {
      return await this.service.deleteImageCapture(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
